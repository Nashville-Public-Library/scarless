#!/bin/expect

# csv2carlx_belmont.exp
# James Staub
# Nashville Public Library

# READ CONFIG.PWD.INI
source csv2carlx_read_config.exp

# SET UP LOG
# TO WRITE TO THE LOG:
# logWrite $logFile "log entry"
source csv2carlx_log.exp
set logFile "$localPath$name.log"

# CONFIG
set nowEpoch [clock seconds]

# START BASH
set timeout 10
set prompt {\$ $}
spawn bash
expect -re $prompt

# expect_before to watch for timeouts; placed after "spawn bash" to avoid an error when run from crontab: Tcl_RegisterChannel: duplicate channel names
expect_before {
	timeout { 
		puts "timeout: aborting: [lindex [info level -1] 0]"
		exec echo "[lindex [info level -1] 0]" | mail -s "Error: TIMEOUT" james.staub@nashville.gov
		logWrite $logFile "ABORTED: error: TIMEOUT: [lindex [info level -1] 0]"
		exit 2
	}
}

logWrite $logFile "START get csv"

# RETRIEVE CSV FILE
#set timeout 10
#send "rsync -a "
#send $User
#send ":"
#send $csvPath
#send "/home/belmont.edu/data/Belmont.csv $localPath/belmont.csv"
#send "\r"
#expect -re $prompt

# SET FILE PERMISSIONS
set timeout 300
send "chmod 700 $localPath/belmont.csv*\r"
expect -re $prompt
logWrite $logFile "COMPLETE get belmont"

## FORMAT INFINITECAMPUS
# set timeout 600
# logWrite $logFile "START format csv"
# send "bash csv2carlx_format.sh\r"
# expect -re $prompt
# logWrite $logFile "COMPLETE format csv"

## RETRIEVE CARLX BELMONT STUDENTS
# set timeout 600
# logWrite $logFile "START get carlx"
# send "$phpPath csv2carlx_get_carlx.php\r"
# expect -re $prompt
# logWrite $logFile "COMPLETE get carlx"

## COMPARE CARLX VS INFINITECAMPUS
# set timeout 600
# logWrite $logFile "START compare carlx vs infinitecampus"
# send "sqlite3 ../data/csv2carlx_mnps_staff.db < csv2carlx_mnps_staff_compare.sql\r"
# expect -re $prompt
# send "sqlite3 ../data/csv2carlx_mnps_students.db < csv2carlx_mnps_students_compare.sql\r"

# ABORT IF CHANGE THRESHOLDS ARE EXCEEDED
# set timeout 10
# expect -re $prompt
# if (file_exists("../data/csv2carlx_mnps_staff_report_defaultbranch_ABORT.csv")||("../data/csv2carlx_mnps_students_report_defaultbranch_ABORT.csv")||("../data/csv2carlx_mnps_staff_report_borrowertype_ABORT.csv")||("../data/csv2carlx_mnps_students_report_borrowertype_ABORT.csv") {
#        echo "ABORT!!!\n";
#        exit;
# }
# expect -re $prompt

# SET FILE PERMISSIONS AGAIN
#set timeout 300
#send "chmod -R 700 ../data/*\r"
#expect -re $prompt
#logWrite $logFile "COMPLETE compare carlx vs csv"

# ADD/UPDATE/REMOVE FROM CARLX
# This is where I need to clobber the CarlX API service with multiple threads
# see https://github.com/Nashville-Public-Library/millennium2carlx/blob/master/fines.sh for example
# see also https://nikic.github.io/2012/12/22/Cooperative-multitasking-using-coroutines-in-PHP.html
# see also https://blog.ircmaxell.com/2012/07/what-generators-can-do-for-you.html#Other-Uses
# but until then, the purely sequential way...

set timeout 3600
logWrite $logFile "START csv put carlx"
send "$phpPath csv2carlx_put_carlx.php\r"
expect -re $prompt
logWrite $logFile "COMPLETE csv put carlx"

exit
