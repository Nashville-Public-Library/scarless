#!/bin/expect --

# ic2carlx_mnps.exp
# James Staub
# Nashville Public Library

# USAGE INSTRUCTIONS
if {[lsearch -exact $argv "--help"] != -1 || [llength $argv] > 3} {
    puts "Usage: expect ic2carlx_mnps.exp \[--test\] \[--imageCleanup\] \[--promisingScholars\]"
    puts "Options:"
    puts "  --test              Run the script in test mode (no changes will be made to CarlX)."
    puts "  --imageCleanup      Remove images of non-eligible MNPS staff and students."
    puts "  --promisingScholars Process only promising scholars records."
    puts "  --help              Display this help message."
    exit 0
}

set working_on "Initializing"

# READ CONFIG.PWD.INI
set working_on "Reading configuration"
source ic2carlx_read_config.exp

# SET UP LOG
# TO WRITE TO THE LOG:
# logWrite $logFile "log entry"
set working_on "Setting up log"
source ic2carlx_log.exp
set logFile "$localPath$name.log"

# CONFIG
set working on "Set time"
set nowEpoch [clock seconds]

# PARSE INPUT ARGUMENTS
set working_on "Parsing input arguments"
set testMode 0
set imageCleanup 0
set promisingScholars 0
foreach {arg} $argv {
    if {$arg == "--test"} {
        set testMode 1
    }
    if {$arg == "--imageCleanup"} {
        set imageCleanup 1
    }
    if {$arg == "--promisingScholars"} {
        set promisingScholars 1
    }
}

# START BASH
set working_on "Starting bash"
set timeout 10
set prompt {\$ $}
spawn bash
expect -re $prompt

# expect_before to watch for timeouts and errors; placed after "spawn bash" to avoid an error when run from crontab: Tcl_RegisterChannel: duplicate channel names
set working_on "Setting up expect_before"
expect_before {
	timeout { 
		puts "timeout: aborting: [lindex [info level -1] 0]"
		exec echo "[lindex [info level -1] 0]" | mail -s "Infinite Campus error: TIMEOUT" james.staub@nashville.gov kate.wingate@nashville.gov
		logWrite $logFile "ABORTED: Infinite Campus error: TIMEOUT: [lindex [info level -1] 0]"
		exit 2
	}
	-re {[Ee]rror} {
		puts "Error detected: aborting: [lindex [info level -1] 0]"
		exec echo "[lindex [info level -1] 0]" | mail -s "Infinite Campus error: ERROR DETECTED" james.staub@nashville.gov kate.wingate@nashville.gov
		logWrite $logFile "ABORTED: Infinite Campus error: ERROR DETECTED: [lindex [info level -1] 0]"
		exit 3
	}
	-re {[Ff]ailed} {
		puts "Failure detected: aborting: [lindex [info level -1] 0]"
		exec echo "[lindex [info level -1] 0]" | mail -s "Infinite Campus error: FAILURE DETECTED" james.staub@nashville.gov kate.wingate@nashville.gov
		logWrite $logFile "ABORTED: Infinite Campus error: FAILURE DETECTED: [lindex [info level -1] 0]"
		exit 4
	}
	-re {[Ff]atal} {
		puts "Fatal error detected: aborting: [lindex [info level -1] 0]"
		exec echo "[lindex [info level -1] 0]" | mail -s "Infinite Campus error: FATAL ERROR DETECTED" james.staub@nashville.gov kate.wingate@nashville.gov
		logWrite $logFile "ABORTED: Infinite Campus error: FATAL ERROR DETECTED: [lindex [info level -1] 0]"
		exit 5
	}
	-re {[Ee]xception} {
		puts "Exception detected: aborting: [lindex [info level -1] 0]"
		exec echo "[lindex [info level -1] 0]" | mail -s "Infinite Campus error: EXCEPTION DETECTED" james.staub@nashville.gov kate.wingate@nashville.gov
		logWrite $logFile "ABORTED: Infinite Campus error: EXCEPTION DETECTED: [lindex [info level -1] 0]"
		exit 6
	}
}

logWrite $logFile "START get infinitecampus"

# IF ICUSER IS IN CONFIG.PWD.INI, USE IT. ICUSER SHOULD LOOK LIKE "limitless@connected.library.nashville.org"
set working_on "Setting up Infinite Campus user and path"
if {[info exists icUser] && [string length $icUser] > 0} {
    # $icUser is not empty
    set icPath "$icUser:$icPath"
}

# RETRIEVE INFINITECAMPUS ZIP PACKAGE
set working_on "Retrieving Infinite Campus ZIP package"
set timeout 10
send "rsync -a "
send $icPath
send "CARLX_INFINITECAMPUS.zip $localPath/CARLX_INFINITECAMPUS.zip"
send "\r"
if {[info exists icUser] && [string length $icUser] > 0} {
    # $icUser is not empty
    expect "password:"
    send $icPassword
    send "\r"
}
expect -re $prompt

# RETRIEVE IMAGES
set working_on "Retrieving images"
set timeout 1800
send "rsync -a --delete "
send $icPath
send "images/ $localPath/images/"
send "\r"
if {[info exists icUser] && [string length $icUser] > 0} {
    # $icUser is not empty
    expect "password:"
    send $icPassword
    send "\r"
}
expect -re $prompt

# UNZIP INFINITE CAMPUS PACKAGE
set working_on "Unzipping Infinite Campus package"
set timeout 10
send "7za x -o"
send $localPath
send " "
send $localPath
send "CARLX_INFINITECAMPUS.zip"
send "\r"
expect "Would you like to replace the existing file*uit?"
send "y\r"
expect "Enter password \(will not be echoed\):"
send "$icPassword\r"
expect "Would you like to replace the existing file*uit?"
send "y\r"
expect -re $prompt

# VERIFY INFINITECAMPUS EXTRACT TIME
set working_on "Verifying Infinite Campus extract time"
set timeout 10
send "stat -c %Y $localPath/CARLX_INFINITECAMPUS_STAFF.txt\r"
expect -re "(\[0-9]{10})"
set staffModified $expect_out(1,string)
expect -re $prompt
send "stat -c %Y $localPath/CARLX_INFINITECAMPUS_STUDENT.txt\r"
expect -re "(\[0-9]{10})"
set studentModified $expect_out(1,string)
if {$nowEpoch - $staffModified > 86400 || $nowEpoch - $studentModified > 86400} then {
	exec echo "EOM" | mail -s "Infinite Campus error: file too old" james.staub@nashville.gov kate.wingate@nashville.gov
	logWrite $logFile "ABORTED: Infinite Campus error: file too old"
	exit 2
}
expect -re $prompt

# SET FILE PERMISSIONS
set working_on "Setting file permissions"
set timeout 300
send "chmod 700 $localPath/CARLX_INFINITECAMPUS*\r"
expect -re $prompt
send "chmod -R 700 $localPath/images/\r"
expect -re $prompt
logWrite $logFile "COMPLETE get infinitecampus"

# FORMAT INFINITECAMPUS
set working_on "Formatting Infinite Campus data"
set timeout 600
logWrite $logFile "START format infinitecampus"
if {$promisingScholars == 1} {
    # do not run staff if promising scholars
    send "bash ic2carlx_mnps_students_format_infinitecampus.sh --promisingScholars\r"
} else {
    send "bash ic2carlx_mnps_staff_format_infinitecampus.sh\r"
    expect -re $prompt
    send "bash ic2carlx_mnps_students_format_infinitecampus.sh\r"
}
expect -re $prompt
logWrite $logFile "COMPLETE format infinitecampus"

# RETRIEVE CARLX MNPS STAFF AND STUDENTS
set working_on "Retrieving CARLX MNPS staff and students"
set timeout 600
logWrite $logFile "START get carlx"
send "$phpPath ic2carlx_get_carlx.php\r"
expect -re $prompt
logWrite $logFile "COMPLETE get carlx"

# COMPARE CARLX VS INFINITECAMPUS
set working_on "Comparing CARLX vs Infinite Campus"
set timeout 600
logWrite $logFile "START compare carlx vs infinitecampus"

# Run staff comparison
set working_on "Comparing CARLX vs Infinite Campus staff"
send "sqlite3 ../data/ic2carlx_mnps_staff.db < ic2carlx_mnps_staff_compare.sql\r"
expect -re $prompt

# Run student comparison
set working_on "Comparing CARLX vs Infinite Campus students"
# For students, handle promising scholars mode
if {$promisingScholars == 1} {
    # Set promising_scholars value in the database
    send "sqlite3 ../data/ic2carlx_mnps_students.db \"UPDATE variables SET value = 1 WHERE name = 'promising_scholars';\"\r"
    expect -re $prompt
} else {
    # Set promising_scholars value in the database
    send "sqlite3 ../data/ic2carlx_mnps_students.db \"UPDATE variables SET value = 0 WHERE name = 'promising_scholars';\"\r"
    expect -re $prompt
}
# For students, run the SQL command to execute the main SQL file
send "sqlite3 ../data/ic2carlx_mnps_students.db < ic2carlx_mnps_students_compare.sql\r"
expect -re $prompt
logWrite $logFile "COMPLETE compare carlx vs infinitecampus"

# ABORT IF CHANGE THRESHOLDS ARE EXCEEDED
#set working_on "Checking for change thresholds"
#set timeout 10
#expect -re $prompt
#if (file_exists("../data/ic2carlx_mnps_staff_report_defaultbranch_ABORT.csv")||("../data/ic2carlx_mnps_students_report_defaultbranch_ABORT.csv")||("../data/ic2carlx_mnps_staff_report_borrowertype_ABORT.csv")||("../data/ic2carlx_mnps_students_report_borrowertype_ABORT.csv") {
#        echo "ABORT!!!\n";
#        exit;
#}
#expect -re $prompt

# SET FILE PERMISSIONS AGAIN
set working_on "Setting file permissions again"
set timeout 300
send "chmod -R 700 ../data/*\r"
expect -re $prompt

# REMOVE IMAGES OF NONELIGIBLE MNPS STAFF AND STUDENTS
set working_on "Cleaning up image files"
if {$imageCleanup == 1} {
    set timeout 900
    logWrite $logFile "START clean up image files"
    send "bash ic2carlx_mnps_staff_imageCleanUp.sh"
    # IF staffSubDir IS IN CONFIG.PWD.INI, USE IT. THESE SHOULD LOOK LIKE "Staff", i.e., no leading or trailing slashes
    if {[info exists staffSubDir] && [string length $staffSubDir] > 0} {
        send " $staffSubDir"
    }
    send "\r"
    expect -re $prompt
    send "bash ic2carlx_mnps_students_imageCleanUp.sh"
    # IF studentSubDir IS IN CONFIG.PWD.INI, USE IT. THESE SHOULD LOOK LIKE "Students", i.e., no leading or trailing slashes
    if {[info exists studentSubDir] && [string length $studentSubDir] > 0} {
        send " $studentSubDir"
    }
    send "\r"
    expect -re $prompt
    logWrite $logFile "COMPLETE clean up image files"
}

# ADD/UPDATE/REMOVE FROM CARLX
# This is where I need to clobber the CarlX API service with multiple threads
# see https://github.com/Nashville-Public-Library/millennium2carlx/blob/master/fines.sh for example
# see also https://nikic.github.io/2012/12/22/Cooperative-multitasking-using-coroutines-in-PHP.html
# see also https://blog.ircmaxell.com/2012/07/what-generators-can-do-for-you.html#Other-Uses
# but until then, the purely sequential way...

set working_on "Putting CARLX MNPS staff and students"
if {$testMode == 1} {
    logWrite $logFile "TEST MODE: skipping put carlx"
    exit
}

set timeout 3600
if {$promisingScholars == 0} {
    set working_on "Putting CARLX MNPS staff"
    logWrite $logFile "START mnps staff put carlx"
    send "$phpPath ic2carlx_mnps_staff_put_carlx.php\r"
    expect -re $prompt
    logWrite $logFile "COMPLETE mnps staff put carlx"
    set working_on "Putting CARLX MNPS students"
    logWrite $logFile "START mnps students put carlx"
    send "$phpPath ic2carlx_mnps_students_put_carlx.php\r"
    expect -re $prompt
    logWrite $logFile "COMPLETE mnps students put carlx"
} else {
    set working_on "Putting CARLX MNPS students: promising scholars"
    logWrite $logFile "START mnps students put carlx"
    send "$phpPath ic2carlx_mnps_students_put_carlx.php --promisingScholars\r"
    expect -re $prompt
    logWrite $logFile "COMPLETE mnps students put carlx"
}
set working_on "Turning off the lights and locking the door"
exit
